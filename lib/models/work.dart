import 'models.dart';

/// Work model
///
/// A Work within the Open Library system is a logical collection of Editions.
class Work {
  String key;
  String title;
  int? coverID;

  /// This constructor is used to create a work.
  Work({
    required this.key,
    required this.title,
    this.coverID,
  });

  /// This method is used to create a work from a JSON string.
  factory Work.fromJson(String str) => Work.fromMap(json.decode(str));

  /// This method is used to create a work from a map.
  factory Work.fromMap(Map<String, dynamic> json) => Work(
        key: json["key"],
        title: json["title"],
        coverID: _getCoverID(json),
      );

  /// This method is used to get the cover ID from the map.
  /// NOTE: This is a workaround to reconcile multiple JSON formats.
  static int? _getCoverID(Map<String, dynamic> json) =>
      json["cover_id"] ?? json["cover_i"];

  /// This method is used to get the cover URL, otherwise a placeholder.
  String getCover() {
    if (coverID != null) {
      return 'https://covers.openlibrary.org/b/id/$coverID-L.jpg';
    }
    return 'https://i.stack.imgur.com/GNhxO.png';
  }

  /// This method is used to get the cover widget, otherwise a autoGenerated Cover.
  ///
  /// This returns a widget conditionally based on coverID
  Widget getCoverWidget({double? height = 190, double? width = 130}) {
    if (coverID != null) {
      return ClipRRect(
        borderRadius: BorderRadius.circular(20),
        clipBehavior: Clip.antiAlias,
        child: FadeInImage(
          placeholder: const AssetImage('assets/no-image.jpg'),
          image: NetworkImage(getCover()),
          height: height,
          width: width,
          fit: BoxFit.cover,
        ),
      );
    }

    return _autoGeneratedCover();
  }

  /// This method is used to get the autoGeneratedCover.
  ///
  /// This returns a widget with a placeholder cover and the title of the work.
  Widget _autoGeneratedCover({double? height = 190, double? width = 130}) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        color: Colors.grey,
        border: Border.all(color: Colors.redAccent, width: 5),
      ),
      height: height,
      width: width,
      child: Center(
        child: Text(
          title,
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}
